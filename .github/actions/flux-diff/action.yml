# assumes repo has been checked out at the appropriate HEAD
name: flux diff
description: 'Runs flux kustomization diff on a specific kustomization'
inputs:
  clustername: 
    description: The cluster name to run flux diff on
    required: true
  kustomization-name:
    description: the name of the kustomization to diff (e.g imx-<service>-<env>)
    required: true
  path:
    description: the relative (from repo root) path of the kustomization manifest
    required: true
  repo: 
    description: the repo to comment the flux-diff in
    required: true
  commentId:
    description: The comment Id to update

runs:
  using: composite
  steps:
    - uses: azure/setup-kubectl@v3.2
    - name: Configure kube
      shell: bash
      run: |
        aws eks update-kubeconfig --name "${{ inputs.clustername }}" --region us-east-2
    - name: Flux diff
      uses: actions/github-script@v6
      with: 
        script: |
          const { execSync } = require('child_process');
          var output = ""
          try {
            output = execSync('flux diff kustomization --path=${{ inputs.path }} ${{ inputs.kustomization-name }} --progress-bar=false', { encoding: 'utf8' });
          }
          catch (ex) {
            output = ex.stdout;
            if (output == "") {
              output = ex.stderr
            }
          }
          if (output == "") {
              console.log("no output")
              return
          }
          let comment = ""
          const body = `<details><summary>This PR has created the following Flux Diff for (${{ inputs.path }}): </summary> \n\n \
            \n\n**Path**: ${{ inputs.path }}\n \
            **Cluster**: ${{ inputs.clustername }}\n\n\`\`\`\n${output}\n\`\`\` \n \
            </details>`;
          const commentId = "${{ inputs.commentId }}" 
          if ( commentId != "") {
            comment = await github.rest.issues.getComment({
              comment_id: commentId,
              owner: "immutable",
              repo: "${{ inputs.repo }}"
            });
            const newBody = `${comment.data.body}\n\n${body}`
            await github.rest.issues.updateComment({
              comment_id: commentId,
              body: newBody,
              owner: "immutable",
              repo: "${{ inputs.repo }}"
            });
          }
