---
name: Docker build and push

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      dockerfile:
        required: false
        type: string
        default: "Dockerfile"
      build-args:
        required: false
        type: string
      semver-level:
        required: false
        type: string
        default: patch
      git-release-tag:
        required: false
        type: string
      push-git-tag:
        required: false
        type: boolean
        default: true
      ghcr-semver-only-tag:
        required: false
        type: boolean
        default: false
      go-mod-cache-path:
        required: false
        type: string
        default: ""
      go-build-cache-path:
        required: false
        type: string
        default: ""

# this is used by github OIDC to assume the admin role later on
permissions: # see this: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  docker_build_tag_push:
    name: Build docker image and tag for ${{ inputs.environment }}
    environment:
      name: ${{ inputs.environment }}
      url: ${{ inputs.url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: false
          token: ${{ secrets.PLATFORM_SA_GITHUB_TOKEN }}
          ref: ${{ inputs.git-release-tag }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PLATFORM_SA_GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/s
          github-token: ${{ secrets.PLATFORM_SA_GITHUB_TOKEN }}

      - name: Set env vars
        run: |
          echo BUILD_TIMESTAMP="$(date +%s)" >> $GITHUB_ENV
          echo REPOSITORY_NAME="$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_ENV
          echo TAG_NAME="$(echo ${{ github.ref }} | cut -d / -f3-)" >> $GITHUB_ENV
          echo SHORT_SHA="$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get latest tag
        run: echo tag="$(git tag --sort=v:refname | tail -n 1)" >> $GITHUB_OUTPUT
        id: get-latest-tag

      - name: Bump semver patch
        uses: ./actions/bump-semver
        id: bump-semver
        with:
          current_version: ${{ steps.get-latest-tag.outputs.tag }}
          level: ${{ inputs.semver-level }}

      - name: Build tags
        id: build-tags
        run: |
          # Dev standard tagging
          echo GHCR_TAG="ghcr.io/${{ github.repository }}/${{ env.REPOSITORY_NAME }}:develop-${{ env.BUILD_TIMESTAMP }}-git.${{ env.SHORT_SHA }}" >> $GITHUB_ENV

      - name: Echo GITHUB_ENV variable
        run: echo $GITHUB_ENV

      - name: Restore Go mod (pkg)
        if: ${{ inputs.go-mod-cache-path != '' }}
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ inputs.go-mod-cache-path }}
          key: ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}-${{ github.sha }}-
            ${{ runner.os }}-gomod-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-gomod-

      - name: Restore Go build (test)
        if: ${{ inputs.go-build-cache-path != '' }}
        uses: actions/cache/restore@v3
        with:
          path: |
            ${{ inputs.go-build-cache-path }}
          key: ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}-${{ github.sha }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}-${{ github.sha }}-
            ${{ runner.os }}-gobuild-${{ hashFiles('**/go.sum') }}-
            ${{ runner.os }}-gobuild-

      - name: Set up Docker Context for buildx
        id: buildx-context
        run: |
          docker context create builders

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builders

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64
          file: ${{ inputs.dockerfile }}
          push: true
          build-args: ${{ inputs.build-args }}
          tags: ${{ env.GHCR_TAG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/${{ env.REPOSITORY_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/${{ env.REPOSITORY_NAME }}:cache,mode=max
          provenance: false

      - if: ${{ inputs.environment == 'prod' && inputs.push-git-tag }}
        name: Push semver patch
        run: |
          tag=${{ steps.bump-semver.outputs.new_version }}
          message='${{ steps.bump-semver.outputs.new_version }}'
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a "${tag}" -m "${message}"
          git push origin "${tag}"
